// Golden Bootstrap 3

// created by Joe Mercer
// https://github.com/joemercer

// has a dependency on bootstrap/less/variables.less

// Inspired by:
// https://github.com/phildionne/golden-bootstrap
// http://www.pearsonified.com/2011/12/golden-ratio-typography.php
// http://www.hongkiat.com/blog/golden-ratio-in-moden-designs/
// http://www.smashingmagazine.com/2010/02/09/applying-mathematics-to-web-design/

// TODO::
// - TESTING
// - make <small> text lighter
// - integrate clearfix mixin and block-center mixin in appropriate places
// - resize typography baselines for different sized devices
// - centering using bonnie's trick? - for golden rectangle see smashingmagazine
// - expand colors
// - .pull-center class for rows (?)
// - golden typography header line height is not a golden ratio
// - - investigate and perhaps do a golden ratio / 10 to size it nicely
// - .golden-content-1,2,3 with divs sized for multiples of ideal line width
// - integrate CPL into ideal content width
// - - see http://www.pearsonified.com/2012/01/characters-per-line.php
// - perhaps do something with three column approach created by the math below
// .make-golden-container-margin-large() {
//   width: percentage(1 / (1 + (2 * @golden-ratio)));
// }

// .make-golden-container-margin-small() {
//   width: percentage(1 / (1 + (2 / @golden-ratio)));
// }



// --------------------------------------------------
// Scaffolding
// --------------------------------------------------

// from scaffolding.less

// Reset the box-sizing

*,
*:before,
*:after {
  .box-sizing(border-box);
}


// Body reset

html {
  font-size: 62.5%;
  -webkit-tap-highlight-color: rgba(0,0,0,0);
}

body {
  // font-family: @font-family-base;
  font-size: @golden-font-size-base;
  line-height: @golden-line-height-base;
  // color: @text-color;
  // background-color: @body-bg;
}

// Reset fonts for relevant elements
input,
button,
select,
textarea {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}


// Links

a {
  // color: @link-color;
  text-decoration: none;

  &:hover,
  &:focus {
    // color: @link-hover-color;
    text-decoration: underline;
  }

  &:focus {
    .tab-focus();
  }
}


// Images

img {
  vertical-align: middle;
}

// Responsive images (ensure images don't scale beyond their parents)
.img-responsive {
  .img-responsive();
}

// Perfect circle
.img-circle {
  border-radius: 50%; // set radius in percents
}


// Horizontal rules

hr {
  margin-top:    @golden-line-height-computed;
  margin-bottom: @golden-line-height-computed;
  border: 0;
  border-top: 1px solid @hr-border;
}


// Only display content to screen readers
//
// See: http://a11yproject.com/posts/how-to-hide-content/

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0,0,0,0);
  border: 0;
}



// --------------------------------------------------
// Golden Bootstrap Variables
// --------------------------------------------------



@golden-ratio:           1.6180339887498948482;
@golden-large:           1/@golden-ratio;
@golden-small:           1-@golden-large;



// --------------------------------------------------
// Golden Grid
// - Bootstrap 3 style grid system complete with containers and columns that have golden proportions
// --------------------------------------------------



//
// Variables for golden grid
// --------------------------------------------------

// examples based on an @font-size-base of 14px
@golden-grid-gutter-width: @golden-line-height-computed; // ~22px

//
// Create the golden grid
// --------------------------------------------------

.make-golden-grid();

// 
// Mixins for the golden grid columns
// --------------------------------------------------

.make-golden-grid() {

  .golden-container,
  .golden-large-container-xs,
  .golden-large-container-sm,
  .golden-large-container-md,
  .golden-large-container-lg,
  .golden-small-container-xs,
  .golden-small-container-sm,
  .golden-small-container-md,
  .golden-small-container-lg {

    // Inner gutter via padding
    padding-left:  (@golden-grid-gutter-width / 2);
    padding-right: (@golden-grid-gutter-width / 2);
    // Horizontal centering via margin
    margin-left: auto;
    margin-right: auto;
    // Default should be 100% so that columns stack on smaller devices
    width: 100%;

    &:before,
    &:after {
      content: " ";
      display: table;
    }

    &:after {
      clear: both;
    }
  }

  .golden-large-col-xs,
  .golden-large-col-sm,
  .golden-large-col-md,
  .golden-large-col-lg,
  .golden-small-col-xs,
  .golden-small-col-sm,
  .golden-small-col-md,
  .golden-small-col-lg
  {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  (@golden-grid-gutter-width / 2);
    padding-right: (@golden-grid-gutter-width / 2);
    // Add a float left to every column
    float: left;
    // Default should be 100% so that columns stack on smaller devices
    width: 100%;

    &.pull-center {
      .pull-center();
    }

  }

  // Extra small grid
  //
  // Grid classes for extra small devices like smartphones. No offset, push, or
  // pull classes are present here due to the size of the target.

  .golden-container {
    width: 100%;
  }
  .make-golden-container(xs);

  .make-golden-col(xs, width);
  .make-golden-col(xs, pull);
  .make-golden-col(xs, push);
  .make-golden-col(xs, offset);


  // Small grid
  //
  // Columns, offsets, pushes, and pulls for the small device range, from phones
  // to tablets.

  @media (min-width: @screen-sm-min) {
    .golden-container {
      width: percentage(@golden-large);
    }
    .make-golden-container(sm);

    .make-golden-col(sm, width);
    .make-golden-col(sm, pull);
    .make-golden-col(sm, push);
    .make-golden-col(sm, offset);
  }


  // Medium grid
  //
  // Columns, offsets, pushes, and pulls for the desktop device range.

  @media (min-width: @screen-md-min) {
    .golden-container {
      width: percentage(@golden-large);
    }
    .make-golden-container(md);

    .make-golden-col(md, width);
    .make-golden-col(md, pull);
    .make-golden-col(md, push);
    .make-golden-col(md, offset);
  }


  // Large grid
  //
  // Columns, offsets, pushes, and pulls for the large desktop device range.

  @media (min-width: @screen-lg-min) {
    .golden-container {
      width: percentage(@golden-small);
    }
    .make-golden-container(lg);

    .make-golden-col(lg, width);
    .make-golden-col(lg, pull);
    .make-golden-col(lg, push);
    .make-golden-col(lg, offset);
  }
}

// Helper mixins for creating the container classes

.make-golden-container(@class) {
  .calc-golden-container(golden-large, @class);
  .calc-golden-container(golden-small, @class);
}

.calc-golden-container(@gold, @class) {
  .@{gold}-container-@{class} {
    width: percentage(@@gold);
  }
}

// Helper mixins for creating column classes

.make-golden-col(@class, @type) {
  .calc-golden-col(golden-large, @class, @type);
  .calc-golden-col(golden-small, @class, @type);
}

.calc-golden-col(@gold, @class, @type) when (@type = width) {
  .@{gold}-col-@{class} {
    width: percentage(@@gold);
  }
}
.calc-golden-col(@gold, @class, @type) when (@type = push) {
  .@{gold}-col-@{class}-push {
    left: percentage(@@gold);
  }
}
.calc-golden-col(@gold, @class, @type) when (@type = pull) {
  .@{gold}-col-@{class}-pull {
    right: percentage(@@gold);
  }
}
.calc-golden-col(@gold, @class, @type) when (@type = offset) {
  .@{gold}-col-@{class}-offset {
    margin-left: percentage(@@gold);
  }
}



// --------------------------------------------------
// Golden Grid Rows
// - Bootstrap 3 inspired rows with golden proportions
// --------------------------------------------------



//
// Create the golden grid rows
// --------------------------------------------------

.make-golden-grid-rows();

// 
// Mixins for the golden grid columns
// --------------------------------------------------

.make-golden-grid-rows() {
  .golden-large-row,
  .golden-small-row
  {
    &:before,
    &:after {
      content: " ";
      display: table;
    }
    &:after {
      clear: both;
    }
  }

  .make-golden-row(height);
  .make-golden-row(pull);
  .make-golden-row(push);
  .make-golden-row(offset);
  .make-golden-row(center);
}

.make-golden-row(@type) {
  .calc-golden-row(golden-large, @type);
  .calc-golden-row(golden-small, @type);
}


.calc-golden-row(@gold, @type) when (@type = height) {
  .@{gold}-row {
    height: percentage(@@gold);
  }
}
.calc-golden-row(@gold, @type) when (@type = push) {
  .@{gold}-row-push {
    top: percentage(@@gold);
  }
}
.calc-golden-row(@gold, @type) when (@type = pull) {
  .@{gold}-row-pull {
    bottom: percentage(@@gold);
  }
}
.calc-golden-row(@gold, @type) when (@type = offset) {
  .@{gold}-row-offset {
    margin-top: percentage(@@gold);
  }
}
.calc-golden-row(@gold, @type) when (@type = center) {
  .@{gold}-row-center {
    // ??? should this be margin-top or top?
    margin-top: percentage((1 - @@gold) / 2);
  }
}



// --------------------------------------------------
// Golden Typography
// - Bootstrap inspired typography with golden proportions
// --------------------------------------------------



//
// Variables for golden typography
// --------------------------------------------------

// examples based on an @font-size-base of 14px
@golden-font-size-base: @font-size-base; // 14px
@golden-font-size-large: ceil(2 * @golden-font-size-base * @golden-large); // ~18px
@golden-font-size-small: floor(2 * @golden-font-size-base * @golden-small); // ~10px

@golden-font-size-h1: ceil(@golden-font-size-base * (@golden-ratio * 3)); // ~60px
@golden-font-size-h2: floor(@golden-font-size-base * (@golden-ratio * 2)); // ~36px
@golden-font-size-h3: ceil(@golden-font-size-base * @golden-ratio); // ~23px
@golden-font-size-h4: @golden-font-size-large; // ~18px
@golden-font-size-h5: @golden-font-size-base; // 14px
@golden-font-size-h6: @golden-font-size-small; // ~10px

@golden-line-height-base: @golden-ratio; // ~1.61
@golden-line-height-computed: floor(@golden-font-size-base * @golden-line-height-base); // ~22px

@golden-headings-line-height: 1 + (@golden-ratio / 10); // ~1.161

//
// Create golden typography
// --------------------------------------------------

.golden-typography {
  // anything under a root element with the .golden-typographyclass will have golden typography
  .make-golden-typography();
}

// 
// Mixin for golden typography
// --------------------------------------------------

.make-golden-typography() {

  // from scaffolding.less

  // Body reset
  // -------------------------

  // reset the root element
  font-size: @golden-font-size-base;
  line-height: @golden-line-height-base;

  // Horizontal rules
  // -------------------------

  hr {
    margin-top:    @golden-line-height-computed;
    margin-bottom: @golden-line-height-computed;
  }

  // from type.less

  // Body text
  // -------------------------
  p {
    margin: 0 0 (@golden-line-height-computed / 2);
  }
  .lead {
    margin-bottom: @golden-line-height-computed;
    // font-size: floor(@font-size-base * 1.15);
    font-size: floor(@golden-font-size-large);
    // line-height: 1.4;
    line-height: @golden-ratio;

    @media (min-width: @screen-sm-min) {
      // font-size: (@font-size-base * 1.5);
      font-size: (@golden-font-size-base * @golden-ratio);
    }
  }

  // Emphasis & misc
  // -------------------------

  // Ex: 14px base font * 85% = about 12px
  // Ex: 14px base font * @golden-large = about 9px
  small,
  .small  {
    // font-size: 85%;
    font-size: percentage(@golden-large);
  }

  // Headings
  // -------------------------

  h1, h2, h3, h4, h5, h6,
  .h1, .h2, .h3, .h4, .h5, .h6 {
    line-height: @golden-headings-line-height;

    small,
    .small {
      line-height: 1;
    }
  }

  h1,
  h2,
  h3 {
    margin-top: @golden-line-height-computed;
    margin-bottom: (@golden-line-height-computed / 2);

    small,
    .small {
      // font-size: 65%;
      font-size: percentage(@golden-large);
    }
  }
  h4,
  h5,
  h6 {
    margin-top: (@golden-line-height-computed / 2);
    margin-bottom: (@golden-line-height-computed / 2);

    small,
    .small {
      // font-size: 75%;
      font-size: percentage(@golden-large);
    }
  }

  h1, .h1 { font-size: @golden-font-size-h1; }
  h2, .h2 { font-size: @golden-font-size-h2; }
  h3, .h3 { font-size: @golden-font-size-h3; }
  h4, .h4 { font-size: @golden-font-size-h4; }
  h5, .h5 { font-size: @golden-font-size-h5; }
  h6, .h6 { font-size: @golden-font-size-h6; }

  // Page header
  // -------------------------

  .page-header {
    padding-bottom: ((@golden-line-height-computed / 2) - 1);
    margin: (@golden-line-height-computed * 2) 0 @golden-line-height-computed;
  }

  // Lists
  // --------------------------------------------------

  // Unordered and Ordered lists
  ul,
  ol {
    margin-top: 0;
    margin-bottom: (@golden-line-height-computed / 2);
    ul,
    ol {
      margin-bottom: 0;
    }
  }

  // Description Lists
  dl {
    margin-bottom: @golden-line-height-computed;
  }
  dt,
  dd {
    line-height: @golden-line-height-base;
  }

  // Blockquotes
  blockquote {
    padding: (@golden-line-height-computed / 2) @golden-line-height-computed;
    margin: 0 0 @golden-line-height-computed;
    p {
      // font-size: (@font-size-base * 1.25);
      font-size: (@golden-font-size-large);
      // line-height: 1.25;
      line-height: @golden-ratio;
    }
    small {
      line-height: @golden-line-height-base;
    }
  }

  // Addresses
  address {
    margin-bottom: @golden-line-height-computed;
    line-height: @golden-line-height-base;
  }

}



// --------------------------------------------------
// Golden Content
// - Container with ideal width based on font-size and line height
// - http://www.pearsonified.com/2011/12/golden-ratio-typography.php
// --------------------------------------------------



//
// Create golden content
// --------------------------------------------------

.golden-content {
  .make-golden-content(@golden-font-size-base; @golden-line-height-computed);
}

// 
// Mixin for golden content
// --------------------------------------------------

.pull-center() {
  margin-left: auto;
  margin-right: auto;
}

.columns(@num) {
  -moz-column-count: @num;
  -webkit-column-count: @num;
  column-count: @num;
}
.columns(@num; @width; @gap) {
  -moz-column-count: @num;
  -webkit-column-count: @num;
  column-count: @num;
  -moz-column-width: @width;
  -webkit-column-width: @width;
  column-width: @width;
  -moz-column-gap: @gap;
  -webkit-column-gap: @gap;
  column-gap: @gap;
}

.make-golden-content(@font-size, @line-height) {

  // not using pow because some LESS compilers don't support the use of pow with awkward units
  @golden-width: ((@font-size * @golden-ratio) * (@font-size * @golden-ratio)) * (1 + (2 * @golden-ratio * ((@line-height / @font-size) - @golden-ratio)));
  width: @golden-width;

  &.pull-center {
    .pull-center();
  }

  &.columns-2 {
    width: 100%;
    .columns(2; @golden-width; @golden-line-height-computed);
  }

  &.columns-3 {
    width: 100%;
    .columns(3; @golden-width; @golden-line-height-computed);
  }

}



// --------------------------------------------------
// Golden Mixins
// - Some helpful mixins for utilizing the golden ratio
// --------------------------------------------------



// Golden Rectangle
// --------------------------------------------------

// Example usage:

// // golden rectangle based on a width of 25px
// .golden-rectangle-ex1 {
//   .make-golden-rectangle(25px);
// }

// // golden rectangle based on a height of 25px
// .golden-rectangle-ex2 {
//   .make-golden-rectangle(height; 25px);
// }

// // golden rectangle based on a width of 25vh with a fallback of 200px
// .golden-rectangle-ex3 {
//   .make-golden-rectangle(width; 25vh; 200px);
// }

// --------------------------------------------------

// 
// Mixins for the golden rectangle
// --------------------------------------------------

.make-golden-rectangle(width; @width; @widthBackup) {
  width: @widthBackup; width: @width;
  height: @widthBackup * @golden-large; height: @width * @golden-large;
}
.make-golden-rectangle(height; @height; @heightBackup) {
  width: @heightBackup * @golden-large; width: @height * @golden-large;
  height: @heightBackup; height: @height;
}

.make-golden-rectangle(width; @width) {
  width: @width;
  height: @width * @golden-large;
}
.make-golden-rectangle(height; @height) {
  width: @height * @golden-large;
  height: @height;
}
.make-golden-rectangle(@width) {
  .make-golden-rectangle(width; @width);
}



// Golden Image
// - wrap your img in a div.golden-image to give it a golden crop
// --------------------------------------------------

// Example usage:

// // golden image based on a width of 200px and the image centered with a left alignment of -68px and top alignment of -11px
// .golden-image-ex1 {
//     .make-golden-image(width; 200px; -68px; -11px);
// }

// // golden image based on a height of 200px and the image centered with a left alignment of -68px and top alignment of -11px
// .golden-image-ex2 {
//     .make-golden-image(height; 200px; -68px; -11px);
// }

// // golden image based on a width of 200px and the image centered with a left alignment of -68px and top alignment of -11px
// .golden-image-ex3 {
//     .make-golden-image(200px; -68px; -11px);
// }

// --------------------------------------------------

// 
// Mixins for the golden image
// --------------------------------------------------

.make-golden-image(width; @width; @left; @top) {
  
  .make-golden-rectangle(width; @width);
  overflow: hidden;
  display: inline-block;

  img {
    position: relative;
    top: @top;
    left: @left;
  }
}
.make-golden-image(height; @height; @left; @top) {
  
  .make-golden-rectangle(height; @height);
  overflow: hidden;
  display: inline-block;

  img {
    position: relative;
    top: @top;
    left: @left;
  }
}
.make-golden-image(@width; @left; @top) {
  
  .make-golden-rectangle(width; @height);
  overflow: hidden;
  display: inline-block;

  img {
    position: relative;
    top: @top;
    left: @left;
  }
}




// Golden Colors
// --------------------------------------------------

// Example usage:

// // class producing a light background color and dark colored text that are pleasing shades of purple
// .goldenPurple {
//   .golden-color(color; darken; purple);
//   .golden-color(background-color; lighten; purple);
// }

// --------------------------------------------------

// 
// Mixins for golden colors
// --------------------------------------------------

// pulls @color towards white to produce a new color related by the golden ratio

// color
.golden-color(color; lighten; @color) {
  .golden-color(color; lighten; @color; @golden-large);
}
.golden-color(color; lighten; @color; @gold) {
  @lightness: lightness(@color);
  @percent: ((100 - @lightness) * @gold);
  @new: lighten(@color, @percent);

  color: @new;
}
// background-color
.golden-color(background-color; lighten; @color) {
  .golden-color(background-color; lighten; @color; @golden-large);
}
.golden-color(background-color; lighten; @color; @gold) {
  @lightness: lightness(@color);
  @percent: ((100 - @lightness) * @gold);
  @new: lighten(@color, @percent);

  background-color: @new;
}

// pulls @color towards black to produce a new color related by the golden ratio

// color
.golden-color(color; darken; @color) {
  .golden-color(color; darken; @color; @golden-large);
}
.golden-color(color; darken; @color; @gold) {
  @lightness: lightness(@color);
  @percent: (@lightness * @gold);
  @new: darken(@color, @percent);

  color: @new;
}
// background-color
.golden-color(background-color; darken; @color) {
  .golden-color(background-color; darken; @color; @golden-large);
}
.golden-color(background-color; darken; @color; @gold) {
  @lightness: lightness(@color);
  @percent: (@lightness * @gold);
  @new: darken(@color, @percent);

  background-color: @new;
}





// Other Helpful Mixins
// - copied from Bootstrap's mixins
// --------------------------------------------------

.clearfix() {
  &:before,
  &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }
  &:after {
    clear: both;
  }
}

// WebKit-style focus
.tab-focus() {
  // Default
  outline: thin dotted #333;
  // WebKit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Center-align a block level element
.center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Box sizing
.box-sizing(@boxmodel) {
  -webkit-box-sizing: @boxmodel;
     -moz-box-sizing: @boxmodel;
          box-sizing: @boxmodel;
}

// Responsive image
//
// Keep images from scaling beyond the width of their parents.

.img-responsive(@display: block;) {
  display: @display;
  max-width: 100%; // Part 1: Set a maximum relative to the parent
  height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}