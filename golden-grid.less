//
// Golden Grid
// - Bootstrap 3 style grid system complete with containers and columns that have golden proportions
// --------------------------------------------------

//
// Create the golden grid
// --------------------------------------------------

.make-golden-grid();

// 
// Mixins for the golden grid columns
// --------------------------------------------------

.make-golden-grid() {

  .golden-container,
  .golden-large-container-xs,
  .golden-large-container-sm,
  .golden-large-container-md,
  .golden-large-container-lg,
  .golden-small-container-xs,
  .golden-small-container-sm,
  .golden-small-container-md,
  .golden-small-container-lg {

    // Inner gutter via padding
    padding-left:  (@golden-grid-gutter-width / 2);
    padding-right: (@golden-grid-gutter-width / 2);
    // Horizontal centering via margin
    margin-left: auto;
    margin-right: auto;
    // Default should be 100% so that columns stack on smaller devices
    width: 100%;

    .clearfix();
  }

  .golden-large-col-xs,
  .golden-large-col-sm,
  .golden-large-col-md,
  .golden-large-col-lg,
  .golden-small-col-xs,
  .golden-small-col-sm,
  .golden-small-col-md,
  .golden-small-col-lg
  {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  (@golden-grid-gutter-width / 2);
    padding-right: (@golden-grid-gutter-width / 2);
    // Add a float left to every column
    float: left;
    // Default should be 100% so that columns stack on smaller devices
    width: 100%;

    &.center-block {
      .center-block();
    }

  }

  // Extra small grid
  //
  // Grid classes for extra small devices like smartphones. No offset, push, or
  // pull classes are present here due to the size of the target.

  .golden-container {
    width: 100%;
  }
  .make-golden-container(xs);

  .make-golden-col(xs, width);
  .make-golden-col(xs, pull);
  .make-golden-col(xs, push);
  .make-golden-col(xs, offset);


  // Small grid
  //
  // Columns, offsets, pushes, and pulls for the small device range, from phones
  // to tablets.

  @media (min-width: @screen-sm-min) {
    .golden-container {
      width: percentage(@golden-large);
    }
    .make-golden-container(sm);

    .make-golden-col(sm, width);
    .make-golden-col(sm, pull);
    .make-golden-col(sm, push);
    .make-golden-col(sm, offset);
  }


  // Medium grid
  //
  // Columns, offsets, pushes, and pulls for the desktop device range.

  @media (min-width: @screen-md-min) {
    .golden-container {
      width: percentage(@golden-large);
    }
    .make-golden-container(md);

    .make-golden-col(md, width);
    .make-golden-col(md, pull);
    .make-golden-col(md, push);
    .make-golden-col(md, offset);
  }


  // Large grid
  //
  // Columns, offsets, pushes, and pulls for the large desktop device range.

  @media (min-width: @screen-lg-min) {
    .golden-container {
      width: percentage(@golden-small);
    }
    .make-golden-container(lg);

    .make-golden-col(lg, width);
    .make-golden-col(lg, pull);
    .make-golden-col(lg, push);
    .make-golden-col(lg, offset);
  }
}

// Helper mixins for creating the container classes

.make-golden-container(@class) {
  .calc-golden-container(golden-large, @class);
  .calc-golden-container(golden-small, @class);
}

.calc-golden-container(@gold, @class) {
  .@{gold}-container-@{class} {
    width: percentage(@@gold);
  }
}

// Helper mixins for creating column classes

.make-golden-col(@class, @type) {
  .calc-golden-col(golden-large, @class, @type);
  .calc-golden-col(golden-small, @class, @type);
}

.calc-golden-col(@gold, @class, @type) when (@type = width) {
  .@{gold}-col-@{class} {
    width: percentage(@@gold);
  }
}
.calc-golden-col(@gold, @class, @type) when (@type = push) {
  .@{gold}-col-@{class}-push {
    left: percentage(@@gold);
  }
}
.calc-golden-col(@gold, @class, @type) when (@type = pull) {
  .@{gold}-col-@{class}-pull {
    right: percentage(@@gold);
  }
}
.calc-golden-col(@gold, @class, @type) when (@type = offset) {
  .@{gold}-col-@{class}-offset {
    margin-left: percentage(@@gold);
  }
}



// --------------------------------------------------
// Golden Grid Rows
// - Bootstrap 3 inspired rows with golden proportions
// --------------------------------------------------



//
// Create the golden grid rows
// --------------------------------------------------

.make-golden-grid-rows();

// 
// Mixins for the golden grid columns
// --------------------------------------------------

.make-golden-grid-rows() {
  .golden-large-row,
  .golden-small-row
  {
    .clearfix();
  }

  .make-golden-row(height);
  .make-golden-row(pull);
  .make-golden-row(push);
  .make-golden-row(offset);
  .make-golden-row(center);
}

.make-golden-row(@type) {
  .calc-golden-row(golden-large, @type);
  .calc-golden-row(golden-small, @type);
}


.calc-golden-row(@gold, @type) when (@type = height) {
  .@{gold}-row {
    height: percentage(@@gold);
  }
}
.calc-golden-row(@gold, @type) when (@type = push) {
  .@{gold}-row-push {
    top: percentage(@@gold);
  }
}
.calc-golden-row(@gold, @type) when (@type = pull) {
  .@{gold}-row-pull {
    bottom: percentage(@@gold);
  }
}
.calc-golden-row(@gold, @type) when (@type = offset) {
  .@{gold}-row-offset {
    margin-top: percentage(@@gold);
  }
}
.calc-golden-row(@gold, @type) when (@type = center) {
  .@{gold}-row-center {
    // ??? should this be margin-top or top?
    margin-top: percentage((1 - @@gold) / 2);
  }
}